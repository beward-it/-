       def adm(mess):
             id=mess.from_user.id
             if id==5072448240:
                with open('dataTelCas.txt') as f :
                    clava=types.InlineKeyboardMarkup()
                    for a in f:
                        name,passw,sum,id,isP,dat=a.split()
                        clava.add(types.InlineKeyboardButton(name,callback_data="nam "+str(i)))
                bot.send_message(mess.chat.id,"–ß—å–∏ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",reply_markup=clava)
             else:
                  bot.send_message(id,"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        @bot.callback_query_handler(func=lambda call :call.data in spisok)
        def red(call):
             trash,nam=call.data
             clava=types.InlineKeyboardMarkup()
             but=types.InlineKeyboardButton("–∏–º—è",callback_data="–∏–º—è "+nam)
             but1=types.InlineKeyboardButton("–ø–∞—Ä–æ–ª—å",callback_data="–ø–∞—Ä–æ–ª—å "+nam)
             but5=types.InlineKeyboardButton("–±–∞–ª–ª–∞–Ω—Å",callback_data="–±–∞–ª–ª–∞–Ω—Å "+nam)
             but2=types.InlineKeyboardButton("id",callback_data="id "+nam)
             but3=types.InlineKeyboardButton("—Å—Ç–∞—Ç—É—Å",callback_data="—Å—Ç–∞—Ç—É—Å "+nam)
             but4=types.InlineKeyboardButton("–¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",callback_data="–¥–∞—Ç—É "+nam)
             clava.add(but,but1,but2,but3,but4,but5)
        @bot.callback_query_handler(func=lambda call:call.data.split in ["–∏–º—è","–ø–∞—Ä–æ–ª—å","–±–∞–ª–ª–∞–Ω—Å","id","—Å—Ç–∞—Ç—É—Å","–¥–∞—Ç—É"])
        def red1(call):
             mess="–Ω–æ–≤—ã–π"
             des,name1=call.data.split
             if des=="–∏–º—è":
                  mess="–Ω–æ–≤–æ–µ"
             if des=="–¥–∞—Ç—É":
                  mess="–Ω–æ–≤—É—é"
             for a in f:
                name,passw,sum,id,isP,dat=a.split()
                if name1==name:
                     passw1=passw
                     sum1=sum
                     id1=id
                     isP1=isP
                     dat1=dat
                     break
             bot.send_message(id1,f"–í–≤–µ–¥–∏—Ç–µ {mess} {des}, {name1} {passw1} {sum1} {id1} {isP1} {dat1}")
             bot.register_next_step_handler(call.message,red2,name1,des)
        def red2(mess,name1,des):
            newDat=mess.text
            name2=name1
            for a in f:
                name,passw,sum,id,isP,dat=a.split()
                if name1==name:
                     passw1,passw2=passw
                     sum1,sum2=sum
                     id1,id2=id
                     isP1,isP2=isP
                     dat1,dat2=dat
                     break
            if des=="–∏–º—è":
                name2=new_data
            if des=="–ø–∞—Ä–æ–ª—å":
                 passw2=newDat
            if des=="–±–∞–ª–ª–∞–Ω—Å":
                 sum2=newDat
            if des=="id":
                 id2=newDat
            if des=="—Å—Ç–∞—Ç—É—Å":
                 isP2=newDat
            if des=="–¥–∞—Ç—É":
                 dat2=newDat
            with open ('dataTelCas.txt', 'r') as a:
                old_data = a.read()
                new_data = old_data.replace(f"{name1} {passw1} {sum1} {id1} {isP1} {dat1}",f"{name2} {passw2} {sum2} {id2} {isP2} {dat2}")
            with open ('dataTelCas.txt', 'w') as a:
                a.write(new_data)
            bot.send_message(mess.chat.id,"–£—Å–ø–µ—à–Ω–æ")






        @bot.message_handler(commands=['lottery'])
        def lottery(mess):
            sum,name,log,isP=checkReg(mess)
            if log:
                tickets=[]
                clava=types.InlineKeyboardMarkup()
                with open('tickets.txt') as f:
                    for a in f:
                        for a1 in a.split():
                            tickets.append(int(a1))
                            clava.add(types.InlineKeyboardButton(str(a1),callback_data="tick "+a1))
                bot.send_message(mess.from_user.id,"–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤ –ø—Ä–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ –¥–≤–∞ –¥–Ω—è\n–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤:\n–ü—Ä–µ–º–∏—É–º\n1000\n500\n250\n100\n–∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!\n–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞:250\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∏–ª–µ—Ç—ã:",reply_markup=clava)
        @bot.callback_query_handler(func=lambda call:call.data in nado)
        def hlebnyeKroshki(call):
            with open('dataTelCas.txt') as f:
                        for a in f :
                            name1,passw1,sum1,id1,isP1,data=a.split()
                            if int(call.message.chat.id)==int(id1):
                                log=True
                                sum=int(sum1)
                                name=name1
                                passw=passw1
                                isP=isP1
                                data1=data
                                id=int(id1)
            if int(sum)>=250:
                trash,tick=call.data.split()
                tick=int(tick)
                tickets=[]
                with open('tickets.txt') as f:
                    for a in f:
                        for a1 in a.split():
                            tickets.append(int(a1))
                ticket=tickets.copy()
                ticket.pop(tick-1)
                newSum=sum-250
                oldtic=""
                tic=""
                with open ('tickets.txt', 'r') as a:
                    old_data = a.read()
                    for o in tickets:
                         oldtic+=str(o)+" "
                    for o in ticket:
                         tic=tic+str(o)+" "
                    new_data = old_data.replace(oldtic, tic)
                with open ('tickets.txt', 'w') as a:
                    a.write(new_data)
                with open('TicketsOnUser.txt') as f:
                    for a in f:
                        if name in a.split():
                            print(a)
                            a11=a+" "+str(tick)
                            print(a11)

                            with open ('TicketsOnUser.txt', 'r') as f:
                                old_data = f.read()
                                new_data = old_data.replace(a, str(a11))
                            with open ('TicketsOnUser.txt', 'w') as f:
                                f.write(new_data)
                            a2=[]
                            for i in a1.split():
                                 a2.append(i)
                            a2.remove(name)
                    bot.send_message(id,"–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n–í–∞—à–∏ –±–∏–ª–µ—Ç—ã: ")
                    bot.send_message(id,*a2)
            else:
                 bot.send_message(id,"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")







            sum, name, log, isP = checkReg(mess)
            if not log:
                return

            try:
                with open('tickets.txt', 'r') as f:
                    tickets = [int(num) for line in f for num in line.split() if num.isdigit()]
                
                with open('TicketsOnUser.txt', 'r') as f:
                    user_tickets = {}
                    for line in f:
                        parts = line.strip().split()
                        if parts:
                            user = parts[0]
                            user_tickets[user] = parts[1:]
                
                markup = types.InlineKeyboardMarkup()
                for ticket in sorted(tickets):
                    btn = types.InlineKeyboardButton(str(ticket), callback_data=f"tick_{ticket}")
                    markup.add(btn)

                user_tickets_str = ", ".join(user_tickets.get(name, [])) if name in user_tickets else "–Ω–µ—Ç"

                msg = (
                    "üéü –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤ üéü\n"
                    "–ü—Ä–∏–∑—ã:\n"
                    "‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n"
                    "‚Ä¢ 1000 –º–æ–Ω–µ—Ç\n"
                    "‚Ä¢ 500 –º–æ–Ω–µ—Ç\n"
                    "‚Ä¢ 250 –º–æ–Ω–µ—Ç\n"
                    "‚Ä¢ 100 –º–æ–Ω–µ—Ç\n"
                    "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã\n\n"
                    f"–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: 250 –º–æ–Ω–µ—Ç\n"
                    f"–í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {user_tickets_str}\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–ª–µ—Ç—ã ({len(tickets)}):"
                )
                
                bot.send_message(mess.from_user.id, msg, reply_markup=markup)

            except Exception as e:
                bot.send_message(mess.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–µ—Ä–µ–∏")
                print(f"Lottery error: {e}")
        @bot.callback_query_handler(func=lambda call: call.data.startswith('tick_'))
        def buy_ticket(call):
            try:
                _, ticket_num = call.data.split('_')
                ticket_num = int(ticket_num)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with open('dataTelCas.txt', 'r') as f:
                    user_data = None
                    for line in f:
                        parts = line.strip().split()
                        if len(parts) >= 6 and int(parts[3]) == call.message.chat.id:
                            user_data = {
                                'name': parts[0],
                                'passw': parts[1],
                                'balance': int(parts[2]),
                                'isP': parts[4]
                            }
                            break
                    
                    if not user_data:
                        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
                if user_data['balance'] < 250:
                    bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
                with open('tickets.txt', 'r+') as f:
                    tickets = [int(num) for line in f for num in line.split() if num.isdigit()]
                    if ticket_num not in tickets:
                        bot.answer_callback_query(call.id, "–ë–∏–ª–µ—Ç —É–∂–µ –∫—É–ø–ª–µ–Ω!")
                        return
                    
                    tickets.remove(ticket_num)
                    f.seek(0)
                    f.write(' '.join(map(str, sorted(tickets))))
                    f.truncate()

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_tickets = []
                updated = False
                lines = []
                with open('TicketsOnUser.txt', 'r') as f:
                    for line in f:
                        parts = line.strip().split()
                        if parts and parts[0] == user_data['name']:
                            user_tickets = parts[1:] + [str(ticket_num)]
                            line = ' '.join([parts[0]] + user_tickets) + '\n'
                            updated = True
                        lines.append(line)

                if not updated:
                    user_tickets = [str(ticket_num)]
                    lines.append(f"{user_data['name']} {ticket_num}\n")

                with open('TicketsOnUser.txt', 'w') as f:
                    f.writelines(lines)

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                new_balance = user_data['balance'] - 250
                with open('dataTelCas.txt', 'r') as f:
                    data = f.read()
                
                old_str = f"{user_data['name']} {user_data['passw']} {user_data['balance']} {call.message.chat.id} {user_data['isP']}"
                new_str = f"{user_data['name']} {user_data['passw']} {new_balance} {call.message.chat.id} {user_data['isP']}"
                new_data = data.replace(old_str, new_str)
                
                with open('dataTelCas.txt', 'w') as f:
                    f.write(new_data)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                tickets_str = ', '.join(user_tickets) if user_tickets else '–Ω–µ—Ç'
                bot.answer_callback_query(call.id, "–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
                bot.send_message(
                    call.message.chat.id,
                    f"üé´ –í—ã –∫—É–ø–∏–ª–∏ –±–∏–ª–µ—Ç ‚Ññ{ticket_num}\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}\n"
                    f"üìã –í–∞—à–∏ –±–∏–ª–µ—Ç—ã: {tickets_str}"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–∏–ª–µ—Ç–∞–º–∏
                with open('tickets.txt', 'r') as f:
                    tickets = [int(num) for line in f for num in line.split() if num.isdigit()]
                
                markup = types.InlineKeyboardMarkup()
                for ticket in sorted(tickets):
                    btn = types.InlineKeyboardButton(str(ticket), callback_data=f"tick_{ticket}")
                    markup.add(btn)

                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )

            except Exception as e:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞")
                print(f"Buy ticket error: {e}")






